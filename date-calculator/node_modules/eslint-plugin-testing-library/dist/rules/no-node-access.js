"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
const scope_manager_1 = require("@typescript-eslint/scope-manager");
const utils_1 = require("@typescript-eslint/utils");
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
const utils_2 = require("../utils");
exports.RULE_NAME = 'no-node-access';
exports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({
    name: exports.RULE_NAME,
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow direct Node access',
            recommendedConfig: {
                dom: 'error',
                angular: 'error',
                react: 'error',
                vue: 'error',
                svelte: 'error',
                marko: 'error',
            },
        },
        messages: {
            noNodeAccess: 'Avoid direct Node access. Prefer using the methods from Testing Library.',
        },
        schema: [
            {
                type: 'object',
                properties: {
                    allowContainerFirstChild: {
                        type: 'boolean',
                    },
                },
                additionalProperties: false,
            },
        ],
    },
    defaultOptions: [
        {
            allowContainerFirstChild: false,
        },
    ],
    create(context, [{ allowContainerFirstChild = false }], helpers) {
        const userEventInstanceNames = new Set();
        function showErrorForNodeAccess(node) {
            if (!helpers.isTestingLibraryImported(true)) {
                return;
            }
            const propertyName = utils_1.ASTUtils.isIdentifier(node.property)
                ? node.property.name
                : null;
            if (propertyName &&
                utils_2.ALL_RETURNING_NODES.some((allReturningNode) => allReturningNode === propertyName)) {
                if (allowContainerFirstChild && propertyName === 'firstChild') {
                    return;
                }
                if (utils_1.ASTUtils.isIdentifier(node.object) &&
                    node.object.name === 'props') {
                    return;
                }
                context.report({
                    node,
                    loc: node.property.loc.start,
                    messageId: 'noNodeAccess',
                });
            }
        }
        function detectTestingLibraryFn(node, variable) {
            if (variable && variable.defs.length > 0) {
                const def = variable.defs[0];
                if (def.type === scope_manager_1.DefinitionType.Variable &&
                    (0, node_utils_1.isCallExpression)(def.node.init)) {
                    return (0, utils_2.resolveToTestingLibraryFn)(def.node.init, context);
                }
            }
            return (0, utils_2.resolveToTestingLibraryFn)(node, context);
        }
        return {
            CallExpression(node) {
                var _a;
                const property = (0, node_utils_1.getDeepestIdentifierNode)(node);
                const identifier = (0, node_utils_1.getPropertyIdentifierNode)(node);
                const isEventHandlerMethod = utils_2.EVENT_HANDLER_METHODS.some((method) => method === (property === null || property === void 0 ? void 0 : property.name));
                const hasUserEventInstanceName = userEventInstanceNames.has((_a = identifier === null || identifier === void 0 ? void 0 : identifier.name) !== null && _a !== void 0 ? _a : '');
                const variable = identifier
                    ? utils_1.ASTUtils.findVariable((0, utils_2.getScope)(context, node), identifier)
                    : null;
                const testingLibraryFn = detectTestingLibraryFn(node, variable);
                if (!testingLibraryFn &&
                    isEventHandlerMethod &&
                    !hasUserEventInstanceName) {
                    context.report({
                        node,
                        loc: property === null || property === void 0 ? void 0 : property.loc.start,
                        messageId: 'noNodeAccess',
                    });
                }
            },
            VariableDeclarator(node) {
                const { init, id } = node;
                if (!(0, node_utils_1.isCallExpression)(init)) {
                    return;
                }
                if (!(0, node_utils_1.isMemberExpression)(init.callee) ||
                    !utils_1.ASTUtils.isIdentifier(init.callee.object)) {
                    return;
                }
                const testingLibraryFn = (0, utils_2.resolveToTestingLibraryFn)(init, context);
                if (init.callee.object.name === (testingLibraryFn === null || testingLibraryFn === void 0 ? void 0 : testingLibraryFn.local) &&
                    utils_1.ASTUtils.isIdentifier(init.callee.property) &&
                    init.callee.property.name === 'setup' &&
                    utils_1.ASTUtils.isIdentifier(id)) {
                    userEventInstanceNames.add(id.name);
                }
            },
            AssignmentExpression(node) {
                if (utils_1.ASTUtils.isIdentifier(node.left) &&
                    (0, node_utils_1.isCallExpression)(node.right) &&
                    (0, node_utils_1.isMemberExpression)(node.right.callee) &&
                    utils_1.ASTUtils.isIdentifier(node.right.callee.object)) {
                    const testingLibraryFn = (0, utils_2.resolveToTestingLibraryFn)(node.right, context);
                    if (node.right.callee.object.name === (testingLibraryFn === null || testingLibraryFn === void 0 ? void 0 : testingLibraryFn.local) &&
                        utils_1.ASTUtils.isIdentifier(node.right.callee.property) &&
                        node.right.callee.property.name === 'setup') {
                        userEventInstanceNames.add(node.left.name);
                    }
                }
            },
            'ExpressionStatement MemberExpression': showErrorForNodeAccess,
            'VariableDeclarator MemberExpression': showErrorForNodeAccess,
        };
    },
});
